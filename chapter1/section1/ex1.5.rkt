#lang racket/base

(define (p) (p))
(define 
  (test x y)
  (if (= x 0) 0 y)
)
; (test 0 (p))という式は，正規順序評価では評価が停止するが，適用順序評価では停止しない
; 正規順序評価では，インタプリタは「値が必要になるまで被演算子を評価しない」．
; したがって，以下のように評価が進む
;   (test 0 (p))
;   (if (= 0 0) 0 (p))  ; 問題文の仮定により，ifは述語を評価した後にどちらかの式を評価する．ここではtrueの式が評価される
;   0
; 一方で，LispやSchemeのような適用順序評価を採用している言語では，「インタプリタはまず演算子と被演算子を評価」する
; したがって，以下のように評価が発散してしまい，停止しない
;   (test 0 (p))
;   (test 0 (p))
;   (test 0 (p))
;   ...

(test 0 (p))
; Schemeは適用順序評価を採用しているため停止しない
